import { defineStore } from 'pinia';
import { AppState, Post } from '../store/types';
import axios from 'axios';

const BACKEND_URL = 'http://localhost:3000';

export const useStore = defineStore('app', () => {
  const state: AppState = {
    posts: [],
    showDeleteAlert: false,
    showCreateAlert: false,
    selectedPost: {
      id: 0,
      image: '',
      tags: [],
      description: '',
      created_at: '',
      updated_at: '',
    },
    allTags: [
      'transport',
      'sports',
      'people',
      'nightlife',
      'nature',
      'food',
      'fashion',
      'city',
      'cats',
      'business',
      'other',
    ],
  };

  const fetchPosts = async () => {
    try {
      const response = await axios.get<Post[]>(`${BACKEND_URL}/posts`);
      console.log('Posts:', response.data);
      SET_POSTS(response.data);
      return response.data;
    } catch (error) {
      console.error('Error fetching posts:', error);
      throw error;
    }
  };

  const fetchPost = async (postId: string) => {
    try {
      const response = await axios.get(`${BACKEND_URL}/posts/${postId}`);
      SET_SELECTED_POST(response.data);
      SET_SELECTED_TAGS(response.data.tags);
    } catch (error) {
      console.error('Error fetching post:', error);
    }
  };

  const updatePost = async (postId: number) => {
    const updatedPost: Post = {
      id: postId,
      image: state.selectedPost.image,
      tags: state.selectedPost.tags,
      description: state.selectedPost.description,
      created_at: state.selectedPost.created_at,
      updated_at: new Date().toISOString(),
    };

    try {
      const response = await axios.put(`${BACKEND_URL}/posts/${postId}`, updatedPost);
      console.log('Post updated:', response.data);
    } catch (error) {
      console.error('Error updating post:', error);
    }
  };

  const deletePost = async (postId: string) => {
    try {
      await axios.delete(`${BACKEND_URL}/posts/${postId}`);
      console.log('Post deleted successfully');
      REMOVE_DELETED_POST(Number(postId));
      SET_SHOW_DELETE_ALERT(true);
      setTimeout(() => {
        SET_SHOW_DELETE_ALERT(false);
      }, 3000);
    } catch (error) {
      console.error('Error deleting post:', error);
      throw error;
    }
  };

  const savePost = async (post: Post) => {
    const newPost: Post = {
      ...post,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    try {
      const response = await axios.post(`${BACKEND_URL}/posts`, newPost);
      console.log('Post created:', response.data);
      SET_SHOW_CREATE_ALERT(true);
      setTimeout(() => {
        SET_SHOW_CREATE_ALERT(false);
      }, 3000);
    } catch (error) {
      console.error('Error creating post:', error);
      throw error;
    }
  };

  const sortedPosts = () => {
    return state.posts.slice().sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
  };

  const showDeleteAlert = () => {
    return state.showDeleteAlert;
  };

  const showCreateAlert = () => {
    return state.showCreateAlert;
  };

  const SET_POSTS = (posts: Post[]) => {
    state.posts = posts;
  };

  const SET_SELECTED_POST = (post: Post) => {
    state.selectedPost = post;
  };

  const SET_SELECTED_TAGS = (tags: string[]) => {
    state.selectedPost.tags = tags;
  };

  const REMOVE_DELETED_POST = (deletedPostId: number) => {
    state.posts = state.posts.filter((post) => post.id !== deletedPostId);
  };

  const SET_SHOW_DELETE_ALERT = (value: boolean) => {
    state.showDeleteAlert = value;
  };

  const SET_SHOW_CREATE_ALERT = (value: boolean) => {
    state.showCreateAlert = value;
  };

  return {
    state,
    fetchPosts,
    fetchPost,
    updatePost,
    deletePost,
    savePost,
    sortedPosts,
    showDeleteAlert,
    showCreateAlert,
  };
});